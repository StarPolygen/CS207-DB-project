<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cs307.sustc.project.dao.GoodDao">
    <select id="queryAllGoods" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where good_status&gt;0 order by id desc limit 2000
    </select>
    <select id="queryGoodsByNumber" resultType="com.cs307.sustc.project.entity.Good">
        select * from good
        where release_time &lt; #{time}
        order by id desc
        limit 0, #{number};
    </select>
    <select id="queryGoodByID" resultType="com.cs307.sustc.project.entity.Good">
        select * from good
        where id = #{id};
    </select>

    <select id="queryAllRealGoods" resultType="java.lang.Integer">
        select id
        from good where good_status=1 and good_tag!=9 order by id desc limit 2000
    </select>

    <select id="queryAllService" resultType="java.lang.Integer">
        select id
        from good where good_status=1 and good_tag=9 order by id desc limit 2000
    </select>

    <select id="queryByIds" resultType="com.cs307.sustc.project.entity.Good">
        select * from good g where g.id in
        <foreach collection="list" item="goodId" index="index"
                 open="(" close=")" separator=",">
            #{goodId}
        </foreach>
    </select>

    <update id="changeStatusAdmin" parameterType="java.lang.Integer">
        update good set good_status = #{val} where id=#{id};
    </update>

    <update id="changeStatus" parameterType="java.lang.Integer">
        update good set good_status = #{val} where id=#{id} and seller_id=#{seller_id};
    </update>

    <insert id="insertGood" parameterType="com.cs307.sustc.project.entity.Good" keyProperty="id" useGeneratedKeys="true">
       insert into good(seller_id, good_tag, `name`, description, good_status, price, last_price, picture_url)
       values (#{seller_id}, #{good_tag}, #{name}, #{description}, #{good_status}, #{price}, #{last_price},#{picture_url});
    </insert>

    <select id="findByName" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where good_status=1 and name=#{name} order by release_time desc limit 1000
    </select>

    <select id="findWithTag" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where good_status=1 and good_tag=#{tag} and name=#{name} order by release_time desc limit 1000
    </select>

    <select id="findKeywordWithTag" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where good_status=1 and good_tag=#{tag} and name like '%${name}%' order by release_time desc limit 1000
    </select>

    <select id="findByKeyword" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where good_status=1 and name like '%${name}%' order by release_time desc limit 1000
    </select>

    <select id="queryGoodsRandom" resultType="com.cs307.sustc.project.entity.Good">
        SELECT t1.id,seller_id,good_tag,name,description,release_time,good_status,price,last_price,picture_url FROM good AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM good)-(SELECT MIN(id) FROM good))+(SELECT MIN(id) FROM good)) AS id) AS t2
        WHERE t1.id >= t2.id and good_status=1
        ORDER BY t1.id LIMIT 14;
    </select>

    <select id="queryServersRandom" resultType="com.cs307.sustc.project.entity.Good">
        SELECT t1.id,seller_id,good_tag,name,description,release_time,good_status,price,last_price,picture_url FROM good AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM good)-(SELECT MIN(id) FROM good))+(SELECT MIN(id) FROM good)) AS id) AS t2
        WHERE t1.id >= t2.id and good_status=1 and good_tag = 9
        ORDER BY t1.id LIMIT 14;
    </select>

<!--    <select id="queryGoodAndSellerByGoodId" resultType="java.util.Map">-->
<!--        select good.id as good_id,good_tag,good.name as good_name, good.description as good_description,good.release_time as good_release_time, good.price as good_price,-->
<!--               good.last_price as good_last_price, picture_url as good_picture_url, seller_id, ui.nickname as seller_nickname, ui.avatar_url as seller_avatar_url-->
<!--        from good cross join user_info ui on good.seller_id = ui.id where good.id=#{good_id}-->
<!--    </select>-->

    <select id="queryByKeyStringPriceIncreasing" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where name like concat('%',#{keyString},'%') and price &lt;= #{max} and price &gt;= #{min} order by price asc
    </select>

    <select id="queryByKeyStringPriceDecreasing" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where name like concat('%',#{keyString},'%') and price &lt;= #{max} and price &gt;= #{min} order by price desc
    </select>

    <select id="queryByKeyStringTimeIncreasing" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where name like concat('%',#{keyString},'%') and price &lt;= #{max} and price &gt;= #{min} order by release_time asc
    </select>

    <select id="queryByKeyStringTimeDecreasing" resultType="com.cs307.sustc.project.entity.Good">
        select * from good where name like concat('%',#{keyString},'%') and price &lt;= #{max} and price &gt;= #{min} order by release_time desc
    </select>

    <select id="queryGoodsByUserId" resultType="com.cs307.sustc.project.entity.Good">
        select * from good
        where seller_id = #{seller_id} and good_status = #{status}
        order by id;
    </select>

    <select id="queryGoodsByUserId" resultType="com.cs307.sustc.project.entity.Good">
        select * from good
        where seller_id = #{seller_id} and good_status &lt;4
        order by id;
    </select>

    <update id="changePrice" parameterType="java.lang.Integer">
        update good set price = #{price} where id=#{good_id} and seller_id=#{seller_id};
    </update>

    <update id="changeContent" parameterType="com.cs307.sustc.project.entity.Good">
        update good set name = #{name}, description = #{description}  where id=#{id} and seller_id=#{seller_id};
    </update>
</mapper>
